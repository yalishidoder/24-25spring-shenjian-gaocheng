/* 2351131 信04 韦世贸 */
#include <iostream>
#include <cstdio>
#include <conio.h>
#include <time.h>
#include <windows.h>
using namespace std;

const int MAX_X = 69;	//定义*组成的边框的宽度
const int MAX_Y = 17;	//定义*组成的边框的高度

/***************************************************************************
  函数名称：
  功    能：完成与system("cls")一样的功能，但效率高
  输入参数：
  返 回 值：
  说    明：清除整个屏幕缓冲区，不仅仅是可见窗口区域(使用当前颜色)
***************************************************************************/
void cls(const HANDLE hout)
{
	COORD coord = { 0, 0 };
	CONSOLE_SCREEN_BUFFER_INFO binfo; /* to get buffer info */
	DWORD num;

	/* 取当前缓冲区信息 */
	GetConsoleScreenBufferInfo(hout, &binfo);
	/* 填充字符 */
	FillConsoleOutputCharacter(hout, (TCHAR)' ', binfo.dwSize.X * binfo.dwSize.Y, coord, &num);
	/* 填充属性 */
	FillConsoleOutputAttribute(hout, binfo.wAttributes, binfo.dwSize.X * binfo.dwSize.Y, coord, &num);

	/* 光标回到(0,0) */
	SetConsoleCursorPosition(hout, coord);
	return;
}

/***************************************************************************
  函数名称：gotoxy
  功    能：将光标移动到指定位置
  输入参数：HANDLE hout ：输出设备句柄
			int X       ：指定位置的x坐标
			int Y       ：指定位置的y坐标
  返 回 值：无
  说    明：此函数不准修改
***************************************************************************/
void gotoxy(const HANDLE hout, const int X, const int Y)
{
	COORD coord;
	coord.X = X;
	coord.Y = Y;
	SetConsoleCursorPosition(hout, coord);
}

/***************************************************************************
  函数名称：showch
  功    能：在指定位置处打印一个指定的字符
  输入参数：HANDLE hout ：输出设备句柄
			int X       ：指定位置的x坐标
			int Y       ：指定位置的y坐标
			char ch     ：要打印的字符
  返 回 值：无
  说    明：此函数不准修改
***************************************************************************/
void showch(const HANDLE hout, const int X, const int Y, const char ch)
{
	gotoxy(hout, X, Y);
	putchar(ch);
}

/***************************************************************************
  函数名称：init_border
  功    能：显示初始的边框及随机字符
  输入参数：HANDLE hout：输出设备句柄
  返 回 值：无
  说    明：此函数不准修改
***************************************************************************/
void init_border(const HANDLE hout)
{
	gotoxy(hout, 0, 0);	//光标移回左上角(0,0)
	cout << "***********************************************************************" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "***********************************************************************" << endl;

	/* 随机显示20个大写字母，字母的值、XY坐标都随机显示
	   rand()函数的功能：随机生成一个在 0-32767 之间的整数
	   思考：在什么情况下，下面这个循环执行生成后，你看到的实际字母个数不足20个？ */
	int i;
	for (i = 0; i < 20; i++)
		showch(hout, rand() % MAX_X + 1, rand() % MAX_Y + 1, 'A' + rand() % 26);

	return;
}

/* -- 按需增加的若干函数可以放在此处 --*/

/***************************************************************************
  函数名称：menu
  功    能：菜单显示，返回选择的选项
  输入参数：选项
  返 回 值：选项
  说    明：
***************************************************************************/
int menu()
{
	int select;
	while (1) {
		cout << "1.用I、J、K、L键控制上下左右(大小写均可，边界停止)" << endl;
		cout << "2.用I、J、K、L键控制上下左右(大小写均可，边界回绕)" << endl;
		cout << "3.用箭头键控制上下左右，边界停止" << endl;
		cout << "4.用箭头键控制上下左右，边界回绕" << endl;
		cout << "0.退出" << endl;
		cout << "[请选择0-4]";
		select = _getch() - '0';/*这样就不需要多按一次回车*/
		cout << select << endl;
		switch (select)
		{
			case 0:
				return 0;/*退出程序*/
				break;
			case 1:
			case 2:
			case 3:
			case 4:
				return select;
			default:
				cls(GetStdHandle(STD_OUTPUT_HANDLE));
				continue;
		}
	}
	
}
/***************************************************************************
  函数名称：move_by_keyboard
  功    能：输入特定的键来移动光标(空格则清理字母)
  输入参数：select,坐标
  返 回 值：退出判断
  说    明：
***************************************************************************/
int move_by_keyboard(int select, int x, int y)
{
	const HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE);

	while (1) {
		if (select == 3 || select == 4) { /*箭头输入*/
			int keyboard;
			int shuru = _getch();
			if (shuru == 224) { /*箭头输入前导符*/
				keyboard = _getch();
				if (select == 3) { /*边界停止*/
					if (keyboard == 72 && y >= 2) /*上*/
						gotoxy(hout, x, y--);
					if (keyboard == 80 && y <= MAX_Y / 2 - 1) /*下*/
						gotoxy(hout, x, y++);
					if (keyboard == 75 && x >= 2)  /*左*/
						gotoxy(hout, x--, y);
					if (keyboard == 77 && x <= MAX_X / 2 - 1)  /*右*/
						gotoxy(hout, x++, y);
					else if (shuru == ' ')
						showch(hout, x, y, ' ');  /*空格删除字符*/
				}
				else if (select == 4) { /*边界回绕*/
					if (keyboard == 72 && y >= 2) { /*上*/
						--y;
						gotoxy(hout, x, y);
					}
					if (keyboard == 80 && y <= MAX_Y / 2 - 1) { /*下*/
						++y;
						gotoxy(hout, x, ++y);
					}
					if (keyboard == 75 && x >= 2) {  /*左*/
						--x;
						gotoxy(hout, x, y);
					}
					if (keyboard == 77 && x <= MAX_X / 2 - 1) {/*右*/
						++x;
						gotoxy(hout, x, y);
					}
					else if (keyboard == ' ') {
						showch(hout, x, y, ' ');/*空格删除字符*/
						gotoxy(hout, x, y);
					}
				}
			}
		}
		else if (select == 1 || select == 2) {
			char keyboard;
			keyboard = _getch();
			if (select == 1) { /*边界停止*/
				if ((keyboard == 'i' || keyboard == 'I') && y >= 2) /*上*/
					gotoxy(hout, x, y--);
				if ((keyboard == 'k' || keyboard == 'K') && y <= MAX_Y / 2 - 1) /*下*/
					gotoxy(hout, x, y++);
				if ((keyboard == 'j' || keyboard == 'J') && x >= 2)  /*左*/
					gotoxy(hout, x--, y);
				if ((keyboard == 'l' || keyboard == 'L') && x <= MAX_X / 2 - 1)  /*右*/
					gotoxy(hout, x++, y);
				else if (keyboard == ' ') {
					showch(hout, x, y, ' ');
					gotoxy(hout, x, y);
				}
				/*空格删除字符*/
			}
			else if (select == 2) { /*边界回绕*/
				if ((keyboard == 'i' || keyboard == 'I')) {/*上*/
					gotoxy(hout, x, y--);
				}
				if ((keyboard == 'k' || keyboard == 'K') && y <= MAX_Y / 2 - 1) /*下*/
					gotoxy(hout, x, y++);
				if ((keyboard == 'j' || keyboard == 'J') && x >= 2)  /*左*/
					gotoxy(hout, x--, y);
				if ((keyboard == 'l' || keyboard == 'L') && x <= MAX_X / 2 - 1)  /*右*/
					gotoxy(hout, x++, y);
				else if (keyboard == ' ') {
					showch(hout, x, y, ' ');
					gotoxy(hout, x--, y);

				}
			}



		}

	}
	
}
	

/***************************************************************************
  函数名称：main
  功    能：调用其他函数
  输入参数：无
  返 回 值：0
  说    明：main函数仅用于初始演示，可以按题目要求全部推翻重写
***************************************************************************/

int main()
{
	while (1) {
		int select = menu();
		
		if (select == 0) /*如果选择0，直接退出程序*/
			return 0;
		const HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE); //取标准输出设备对应的句柄

		/* 生成伪随机数的种子，只需在程序开始时执行一次即可 */
		srand((unsigned int)(time(0)));

		/* 此句的作用是调用系统的cls命令清屏 */
		cls(hout);

		/* 显示初始的边框及其中的随机字符 */
		init_border(hout);

		gotoxy(hout, MAX_X / 2, MAX_Y / 2);/*把光标移动到区域中央*/

		
		move_by_keyboard(select, MAX_X / 2, MAX_Y / 2);

		
	}


	//暂停(此处作业要求是只能按回车退出，目前的getchar示例，是允许按任意键+回车退出，且任意键会出现在屏幕上)
	int key = _getch();
	if (key == 32 ) {
		return 0;
	}
	
}